DATA:
inicio
n
count0 0
count1 0
and 1
i 0
arr
ord

CODE:

copy_arr:
MOV A,(arr)
PUSH A
MOV A,(inicio)
PUSH A
MOV A,(and)
MOV B,(inicio)
MOV B,(B)*
AND (arr)*
INC (inicio)
INC (arr)
INC (i)
MOV A,(n)
CMP A,(i)
JLE res
JMP  copy_arr

res:
CALL reset
JMP sort

reset:
RST i
POP A
MOV (inicio),A
pop A
MOV (arr),A
PUSH A
MOV A,(inicio)
PUSH A
RET

sum:
MOV B,(arr)
MOV A,(B)
CMP A,0
JEQ addZ
JNE addO

comp:
INC (i)
INC (arr)
MOV A,(n)
CMP A,(i)
JLE next
JMP sum

addZ:
INC (count0)
JMP comp

addO:
INC (count1)
JMP comp

next:
CALL reset

do:
MOV B,(arr)
MOV A,(B)
JEQ zero
JMP one

one:
MOV A,(ord)
PUSH A
MOV B,(count1)
MOV A,(count1)
SUB A,1
MOV (count0),A
POP A
JMP ciclo

zero:
MOV A,(ord)
PUSH A
MOV B,(count0)
MOV A,(count0)
SUB A,1
MOV (count0),A
POP A
JMP ciclo

ciclo:
CMP B,A
JLE insert
INC A
JMP ciclo

insert:
MOV B,(inicio)
MOV B,(B)
PUSH B
MOV B,A
POP A
MOV (B),A
INC (inicio)
INC (i)
MOV B,(i)
CMP B,(n)
JGE reset_inicio
JMP do

reset_inicio:
POP B		#B = inicio original
MOV (inicio),B
PUSH B
MOV B,(ord)
PUSH B
RST (i)

replace_origin:
MOV B,(ord)
MOV A,(B)
MOV B,(inicio)
MOV (B),A
INC (ord)
INC B
PUSH B
MOV B,(ord)
MOV A,(B)
INC (i)
MOV B,(i)
CMP B,(n)
JGE next_insert
POP B
MOV (inicio),B
JMP replace_origin

next_insert:
SHL (and)
RST (count0)
RST (count1)
MOV A,(and)
JEQ end
JMP sum
